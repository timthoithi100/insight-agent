name: Deploy Insight-Agent to GCP

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}
  GAR_LOCATION: us-central1
  SERVICE: insight-agent
  REGION: us-central1

jobs:
  lint-and-test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install flake8 pytest black isort
          pip install -r requirements.txt

      - name: Lint with flake8
        run: |
          # stop the build if there are Python syntax errors or undefined names
          flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
          # exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
          flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics

      - name: Check code formatting with black
        run: black --check .

      - name: Check import sorting with isort
        run: isort --check-only .

      - name: Run basic tests
        run: |
          python -c "
          import main
          from fastapi.testclient import TestClient
          client = TestClient(main.app)
          
          # Test health endpoint
          response = client.get('/health')
          assert response.status_code == 200
          
          # Test analyze endpoint
          response = client.post('/analyze', json={'text': 'Hello world!'})
          assert response.status_code == 200
          data = response.json()
          assert 'word_count' in data
          assert data['word_count'] == 2
          
          print('All tests passed!')
          "

  terraform-validate:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.5.0

      - name: Terraform Format Check
        run: terraform fmt -check -recursive terraform/

      - name: Terraform Validate
        run: |
          cd terraform
          terraform init -backend=false
          terraform validate

  build-and-push:
    needs: [lint-and-test, terraform-validate]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    permissions:
      contents: read
      id-token: write

    outputs:
      image-url: ${{ steps.image.outputs.image-url }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Google Auth
        id: auth
        uses: 'google-github-actions/auth@v2'
        with:
          credentials_json: '${{ secrets.GCP_SA_KEY }}'

      - name: Set up Cloud SDK
        uses: 'google-github-actions/setup-gcloud@v2'

      - name: Configure Docker to use gcloud as a credential helper
        run: |
          gcloud auth configure-docker $GAR_LOCATION-docker.pkg.dev

      - name: Get Artifact Registry repository name
        id: get-repo
        run: |
          # This assumes the repository name includes a suffix. Adjust as needed.
          REPO_NAME=$(gcloud artifacts repositories list --location=$GAR_LOCATION --filter="name:insight-agent" --format="value(name)" | head -n1)
          if [ -z "$REPO_NAME" ]; then
            echo "No repository found. Make sure Terraform has been applied first."
            exit 1
          fi
          REPO_ID=$(basename $REPO_NAME)
          echo "repository-id=$REPO_ID" >> $GITHUB_OUTPUT

      - name: Build and Push Container
        id: image
        run: |-
          TIMESTAMP=$(date +%Y%m%d-%H%M%S)
          IMAGE_TAG="$GAR_LOCATION-docker.pkg.dev/$PROJECT_ID/${{ steps.get-repo.outputs.repository-id }}/insight-agent:$TIMESTAMP"
          
          docker build -t $IMAGE_TAG .
          docker push $IMAGE_TAG
          
          echo "image-url=$IMAGE_TAG" >> $GITHUB_OUTPUT

  deploy:
    needs: build-and-push
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    permissions:
      contents: read
      id-token: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Google Auth
        id: auth
        uses: 'google-github-actions/auth@v2'
        with:
          credentials_json: '${{ secrets.GCP_SA_KEY }}'

      - name: Set up Cloud SDK
        uses: 'google-github-actions/setup-gcloud@v2'

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.5.0

      - name: Terraform Init
        run: |
          cd terraform
          terraform init

      - name: Terraform Plan
        run: |
          cd terraform
          terraform plan \
            -var="project_id=$PROJECT_ID" \
            -var="region=$REGION" \
            -var="container_image=${{ needs.build-and-push.outputs.image-url }}" \
            -var="allow_public_access=false"

      - name: Terraform Apply
        run: |
          cd terraform
          terraform apply -auto-approve \
            -var="project_id=$PROJECT_ID" \
            -var="region=$REGION" \
            -var="container_image=${{ needs.build-and-push.outputs.image-url }}" \
            -var="allow_public_access=false"

      - name: Get service URL
        run: |
          cd terraform
          SERVICE_URL=$(terraform output -raw service_url)
          echo "Service deployed at: $SERVICE_URL"
          echo "SERVICE_URL=$SERVICE_URL" >> $GITHUB_ENV

      - name: Test deployment
        run: |
          # Wait for service to be ready
          sleep 30
          
          # Test the deployed service (requires authentication for private services)
          gcloud run services proxy ${{ env.SERVICE }}-* --port=8080 --region=${{ env.REGION }} &
          PROXY_PID=$!
          sleep 10
          
          # Test health endpoint
          curl -f http://localhost:8080/health || (echo "Health check failed" && kill $PROXY_PID && exit 1)
          
          # Test analyze endpoint
          curl -f -X POST http://localhost:8080/analyze \
            -H "Content-Type: application/json" \
            -d '{"text": "Hello from CI/CD!"}' || (echo "Analyze test failed" && kill $PROXY_PID && exit 1)
          
          kill $PROXY_PID
          echo "Deployment test successful!"